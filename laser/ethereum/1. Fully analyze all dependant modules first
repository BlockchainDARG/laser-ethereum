1. Fully analyze all dependant modules first
2. For each CALL, make an edge to node 0 of the target module
3. For each RETURN, make and edge back... to where? And where do we get the fucking return value from?

Do we need to keep track of function calls on a higher level, so we can note different possible returns? Yes, we may need to do this to determine the value to be used as last return value.


Maybe if calldata[0] contains a function hash, we treat it special somehow, as a concrete value?



What are POSSIBLE return values?






But then, what about the symbolic analysis? How can we picture this with constraints only?

We know that after each call, execution continues with the next instruction. But, but, but...

Do we need to think in terms of states?





Compute possible symbolic RETURN values in a second step? That could make sense...

So that means, we can compute both independently?